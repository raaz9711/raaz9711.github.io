[TestClass]
public class CrossSellNotificationTests
{
        [TestMethod]
            public void GetNotificationDetails_ValidNotificationId_ReturnsNotification()
                {
                            // Arrange
                                    int notificationId = 1; // Replace with a valid notificationId
                                            var mockContext = new Mock<YourDbContext>(); // Replace with the actual context type

                                                    // Assuming you have a setup method to seed data in the mock context
                                                            SetupMockContext(mockContext, notificationId);

                                                                    var notificationService = new YourNotificationService(mockContext.Object);

                                                                            // Act
                                                                                    var result = notificationService.GetNotificationdetails(notificationId);

                                                                                            // Assert
                                                                                                    Assert.IsNotNull(result);
                                                                                                            // Add more assertions based on your implementation and expected behavior
                }

                    private void SetupMockContext(Mock<YourDbContext> mockContext, int notificationId)
                        {
                                    // Set up your mock context to return data for the specified notificationId
                                            var fakeNotificationData = new List<CrossSellNotification>
                                                    {
                                                                    new CrossSellNotification { NotificationId = notificationId, /* add other properties */ }
                                                                                // Add more fake data if needed
                                                    }.AsQueryable();

                                                            mockContext.Setup(c => c.CrossSellNotification).Returns(MockDbSet(fakeNotificationData));
                        }

                            private static DbSet<T> MockDbSet<T>(IQueryable<T> data) where T : class
                                {
                                            var mockSet = new Mock<DbSet<T>>();
                                                    mockSet.As<IQueryable<T>>().Setup(m => m.Provider).Returns(data.Provider);
                                                            mockSet.As<IQueryable<T>>().Setup(m => m.Expression).Returns(data.Expression);
                                                                    mockSet.As<IQueryable<T>>().Setup(m => m.ElementType).Returns(data.ElementType);
                                                                            mockSet.As<IQueryable<T>>().Setup(m => m.GetEnumerator()).Returns(data.GetEnumerator());
                                                                                    return mockSet.Object;
                                }
}

                                }
                                                    }
                        }
                }
}